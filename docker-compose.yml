version: "3.9"
services:
  vendor_db:
    image: tnlinc/db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - main
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - db_volume:/var/lib/comparing/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  test_db:
    image: tnlinc/db
    environment:
      POSTGRES_DB: ${TEST_DB_NAME}
      POSTGRES_USER: ${TEST_DB_USER}
      POSTGRES_PASSWORD: ${TEST_DB_PASSWORD}
    networks:
      - main
    ports:
      - "${TEST_DB_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEST_DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  vendor:
    build: .
    image: tnlinc/vendor
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: vendor_db
      DB_PORT: 5432

      VENDOR_DB_SCHEMA: ${VENDOR_DB_SCHEMA}
      VENDOR_PORT: ${VENDOR_PORT}

    depends_on:
      vendor_db:
        condition: service_healthy
      logstash:
        condition: service_started
    expose:
      - "8000"
    networks:
      - main
    ports:
      - "${VENDOR_PORT}:8000"
    healthcheck:
      test: ["CMD-SHELL", "bash scripts/fastApi_health_check.sh"]
      interval: 30s
      timeout: 30s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:7.16.0
    environment:
      ES_HOST: "elasticsearch"
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    ports:
      - "${LOGSTASH_PORT}:5044/udp"
    volumes:
      - ./deploy/logstash.conf:/config/logstash.conf:ro
    command: logstash -f /config/logstash.conf
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - main

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.0
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - ${ES_PORT}:9200
      - "9300:9300"
    volumes:
      - es_volume:/usr/share/elasticsearch/data
    healthcheck:
      test: curl -u elastic:elastic -s -f elasticsearch:9200/_cat/health >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - main

  kibana:
    image: docker.elastic.co/kibana/kibana:7.16.0
    ports:
      - "${KIBANA_PORT}:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - main

volumes:
  db_volume: {}
  es_volume: {}

networks:
  main: {}
